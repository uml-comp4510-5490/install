# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ethercat_trigger_controllers/SetWaveformRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetWaveformRequest(genpy.Message):
  _md5sum = "988450e1ddd386f3967c381c19b2330c"
  _type = "ethercat_trigger_controllers/SetWaveformRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 rep_rate
float64 phase
float64 duty_cycle
int32 running
int32 active_low
int32 pulsed
"""
  __slots__ = ['rep_rate','phase','duty_cycle','running','active_low','pulsed']
  _slot_types = ['float64','float64','float64','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rep_rate,phase,duty_cycle,running,active_low,pulsed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetWaveformRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rep_rate is None:
        self.rep_rate = 0.
      if self.phase is None:
        self.phase = 0.
      if self.duty_cycle is None:
        self.duty_cycle = 0.
      if self.running is None:
        self.running = 0
      if self.active_low is None:
        self.active_low = 0
      if self.pulsed is None:
        self.pulsed = 0
    else:
      self.rep_rate = 0.
      self.phase = 0.
      self.duty_cycle = 0.
      self.running = 0
      self.active_low = 0
      self.pulsed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3i().pack(_x.rep_rate, _x.phase, _x.duty_cycle, _x.running, _x.active_low, _x.pulsed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.rep_rate, _x.phase, _x.duty_cycle, _x.running, _x.active_low, _x.pulsed,) = _get_struct_3d3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3i().pack(_x.rep_rate, _x.phase, _x.duty_cycle, _x.running, _x.active_low, _x.pulsed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.rep_rate, _x.phase, _x.duty_cycle, _x.running, _x.active_low, _x.pulsed,) = _get_struct_3d3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3i = None
def _get_struct_3d3i():
    global _struct_3d3i
    if _struct_3d3i is None:
        _struct_3d3i = struct.Struct("<3d3i")
    return _struct_3d3i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ethercat_trigger_controllers/SetWaveformResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetWaveformResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "ethercat_trigger_controllers/SetWaveformResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetWaveformResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SetWaveform(object):
  _type          = 'ethercat_trigger_controllers/SetWaveform'
  _md5sum = '988450e1ddd386f3967c381c19b2330c'
  _request_class  = SetWaveformRequest
  _response_class = SetWaveformResponse
